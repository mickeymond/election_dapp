{"version":3,"sources":["components/Election.js","components/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["Election","state","for","candidates","message","hasVoted","ec","e","preventDefault","this","setState","props","drizzle","contracts","methods","vote","send","value","window","location","reload","_context","t0","endElection","_context2","candidatesCount","call","i","candidate","push","voted","drizzleState","accounts","map","each","react_default","a","createElement","key","id","scope","name","voteCount","_this2","className","onSubmit","bind","required","onChange","target","disabled","renderOptions","type","onClick","renderCandidates","renderForm","Component","Spinner","role","App","loading","drizzle_react","Consumer","drizzleContext","initialized","components_Election","showLoader","hideLoader","Boolean","hostname","match","options","drizzleStore","generateStore","Drizzle","ReactDOM","render","Provider","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9ea2c5a4.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Election extends Component {\n\n    state = { for: '', candidates: [], message: '', hasVoted: false, ec: '' };\n\n    async vote(e) {\n        e.preventDefault();\n        this.setState({ message: \"Waiting for transaction!!!\" });\n\n        const Election = this.props.drizzle.contracts.Election;\n        try {\n            await Election.methods.vote(this.state.for).send({ value: 7214600000000000 });\n\n            window.location.reload();\n        } catch (e) {\n            this.setState({ message: e.message });\n        }\n    }\n\n    async endElection(e) {\n        e.preventDefault();\n        this.setState({ message: \"Waiting for transaction!!!\" });\n\n        const Election = this.props.drizzle.contracts.Election;\n        try {\n            await Election.methods.endElection().send();\n\n            window.location.reload();\n        } catch (e) {\n            this.setState({ message: e.message });\n        }\n    }\n\n    async componentDidMount() {\n        // window.ethereum.on('accountsChanged', function (accounts) {\n        //     window.location.reload();\n        // });\n\n        const Election = this.props.drizzle.contracts.Election;\n\n        const candidatesCount = await Election.methods.candidatesCount().call();\n\n        const candidates = [];\n        for(let i = 1; i <= candidatesCount; i++) {\n            const candidate = await Election.methods.candidates(i).call();\n            candidates.push(candidate);\n        }\n\n        const ec = await Election.methods.ec().call();\n\n        const hasVoted = await Election.methods.voted(this.props.drizzleState.accounts[0]).call();\n\n        this.setState({ candidates, hasVoted, ec });\n    }\n\n    renderCandidates() {\n        return this.state.candidates.map(each => {\n            return (\n                <tr key={each.id}>\n                    <th scope=\"row\">{each.id}</th>\n                    <td>{each.name}</td>\n                    <td>{each.voteCount}</td>\n                </tr>\n            );\n        });\n    }\n\n    renderOptions() {\n        return this.state.candidates.map(each => <option key={each.id} value={each.id}>{each.name}</option>);\n    }\n\n    renderForm() {\n        if(this.state.hasVoted) {\n            return <p className=\"text-success\"><strong>You have already casted your vote!!!</strong></p>\n        }\n\n        return (\n            <form onSubmit={this.vote.bind(this)}>\n                <div className=\"input-group\">\n                    <select\n                        required\n                        className=\"custom-select\"\n                        value={this.state.for}\n                        onChange={(e) => this.setState({ for: e.target.value })}\n                    >\n                        <option value=\"\" disabled>Please Choose A Candidate...</option>\n                        {this.renderOptions()}\n                    </select>\n                    <div className=\"input-group-append\">\n                        <button className=\"btn btn-success\" type=\"submit\">Cast Vote</button>\n                    </div>\n                </div>\n            </form>\n        );\n    }\n    \n    render() {\n        return (\n            <div>\n                <h1 className=\"mb-3\"><strong>BLOCKCHAIN VOTING APPLICATION</strong></h1>\n                <h5 className=\"mb-3 text-info\">This is a prototype voting app running on the ethereum network.</h5>\n                <h5 className=\"mb-3\">Election is managed by: <strong>{this.state.ec}</strong></h5>\n                {this.props.drizzleState.accounts[0] === this.state.ec ? <button onClick={this.endElection.bind(this)} className=\"mb-3 btn btn-danger\">End Election</button> : ''}\n                <table className=\"table\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">ID</th>\n                            <th scope=\"col\">Name</th>\n                            <th scope=\"col\">Vote Count</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.renderCandidates()}\n                    </tbody>\n                </table>\n                <hr />\n                    {this.props.drizzleState.accounts[0] === this.state.ec ? <p>EC cannot vote!!!</p> : this.renderForm()}\n                <hr />\n                <p>Your Account is: <strong>{this.props.drizzleState.accounts[0]}</strong></p>\n                <hr />\n                <p>{this.state.message}</p>\n            </div>\n        );\n    }\n}\n\nexport default Election;\n","import React from 'react';\n\nexport default () => {\n    return (\n        <div className=\"text-center\">\n          <div className=\"spinner-border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </div>\n        </div>\n    );\n}\n","import React, { Component } from 'react';\nimport { DrizzleContext } from 'drizzle-react';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nimport Election from './components/Election';\nimport Spinner from './components/Spinner';\n\nclass App extends Component {\n\n  state = { loading: true };\n\n  showLoader() {\n    this.setState({ loading: true });\n  }\n\n  hideLoader() {\n    this.setState({ loading: false });\n  }\n\n  render() {\n    return (\n      <DrizzleContext.Consumer>\n        {drizzleContext => {\n          const { drizzle, drizzleState, initialized } = drizzleContext;\n      \n          if (!initialized) {\n            return (\n              <div className=\"container text-center mt-5\">\n                <Spinner />\n              </div>\n            );\n          }\n    \n          return (\n            <div className=\"container text-center mt-5\">\n              <Election\n                drizzle={drizzle}\n                drizzleState={drizzleState}\n                showLoader={this.showLoader.bind(this)}\n                hideLoader={this.hideLoader.bind(this)}\n              />\n            </div>\n          );\n        }}\n      </DrizzleContext.Consumer>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Drizzle, generateStore } from \"drizzle\";\nimport { DrizzleContext } from 'drizzle-react';\n\nimport Election from './contracts/Election.json'\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst options = {\n    contracts: [\n        Election,\n    ]\n}\n\nconst drizzleStore = generateStore(options);\nconst drizzle = new Drizzle(options, drizzleStore);\n\nReactDOM.render(\n    <DrizzleContext.Provider drizzle={drizzle}>\n        <App />\n    </DrizzleContext.Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}