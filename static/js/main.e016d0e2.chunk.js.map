{"version":3,"sources":["components/Election.js","components/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["Election","state","for","candidates","message","hasVoted","ec","e","preventDefault","this","props","showLoader","drizzle","contracts","methods","vote","send","value","window","location","reload","hideLoader","toastr","error","_context","t0","endElection","_context2","ethereum","on","accounts","candidatesCount","call","i","candidate","push","voted","drizzleState","setState","map","_ref","id","name","voteCount","react_default","a","createElement","Table","Row","key","Cell","Label","ribbon","_ref2","flag","text","_this2","Container","Segment","Dropdown","placeholder","onChange","data","selection","options","candidateOptions","Button","disabled","primary","onClick","bind","textAlign","Header","as","Divider","Message","celled","HeaderCell","Body","renderCandidates","raised","renderForm","Component","Spinner","Loader","active","inline","size","App","loading","drizzle_react","Consumer","drizzleContext","initialized","className","components_Election","Boolean","hostname","match","drizzleStore","generateStore","Drizzle","ReactDOM","render","Provider","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e016d0e2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Divider, Container, Button, Header, Segment, Message , Dropdown, Table, Label } from 'semantic-ui-react';\nimport toastr from 'toastr/build/toastr.min.js';\n\nclass Election extends Component {\n\n    state = { for: '', candidates: [], message: '', hasVoted: false, ec: '' };\n\n    async vote(e) {\n        e.preventDefault();\n        this.props.showLoader();\n\n        const Election = this.props.drizzle.contracts.Election;\n        try {\n            await Election.methods.vote(this.state.for).send({ value: 7214600000000000 });\n\n            window.location.reload();\n        } catch (e) {\n            this.props.hideLoader();\n            toastr.error(e.message);\n        }\n    }\n\n    async endElection(e) {\n        e.preventDefault();\n        this.props.showLoader();\n\n        const Election = this.props.drizzle.contracts.Election;\n        try {\n            await Election.methods.endElection().send();\n\n            window.location.reload();\n        } catch (e) {\n            this.props.hideLoader();\n            toastr.error(e.message);\n        }\n    }\n\n    async componentDidMount() {\n        if(window.ethereum) {\n            window.ethereum.on('accountsChanged', function (accounts) {\n                window.location.reload();\n            });\n        }\n\n        const Election = this.props.drizzle.contracts.Election;\n\n        const candidatesCount = await Election.methods.candidatesCount().call();\n\n        const candidates = [];\n        for(let i = 1; i <= candidatesCount; i++) {\n            const candidate = await Election.methods.candidates(i).call();\n            candidates.push(candidate);\n        }\n\n        const ec = await Election.methods.ec().call();\n\n        const hasVoted = await Election.methods.voted(this.props.drizzleState.accounts[0]).call();\n\n        this.setState({ candidates, hasVoted, ec });\n    }\n\n    renderCandidates() {\n        return this.state.candidates.map(({ id, name, voteCount }) => {\n            return (\n                <Table.Row key={id}>\n                    <Table.Cell>\n                    <Label ribbon>{id}</Label>\n                    </Table.Cell>\n                    <Table.Cell>{name}</Table.Cell>\n                    <Table.Cell>{voteCount}</Table.Cell>\n                </Table.Row>\n            );\n        });\n    }\n\n    candidateOptions() {\n        return this.state.candidates.map(({ id, name }) => ({ key: id, value: id, flag: 'id', text: name }));\n    }\n\n    renderForm() {\n        if(this.props.drizzleState.accounts[0] === this.state.ec) {\n            return <strong>EC cannot vote!!!</strong>;\n        } else if(this.state.hasVoted) {\n            return <strong>You have already casted your vote!!!</strong>;\n        }\n        return (\n            <Container>\n                <Segment>\n                    <Dropdown\n                        placeholder='Select A Candidate'\n                        onChange={(e, data) => this.setState({ for: data.value })}\n                        selection\n                        options={this.candidateOptions()}\n                    />\n                </Segment>\n                <Button\n                    disabled={this.state.for === '' ? true : false}\n                    primary\n                    onClick={this.vote.bind(this)}\n                >\n                    Cast Vote\n                </Button>\n            </Container>\n        );\n    }\n    \n    render() {\n        return (\n            <Container textAlign=\"center\">\n                <Segment>\n                    <Header as=\"h1\">BLOCKCHAIN VOTING APPLICATION</Header>\n                </Segment>\n                <Divider />\n                <Message>\n                    <Message.Header>Election Manager</Message.Header>\n                    <p><strong>{this.state.ec}</strong></p>\n                </Message>\n                <Divider />\n                <Message>\n                    <Message.Header>Election Information</Message.Header>\n                    <p>This is a prototype voting app running on the <strong>ropsten</strong> ethereum network.</p>\n                </Message>\n                <Divider />\n                <Message>\n                    <Message.Header>Election Results</Message.Header>\n                    <Table celled>\n                        <Table.Header>\n                            <Table.Row>\n                                <Table.HeaderCell>ID</Table.HeaderCell>\n                                <Table.HeaderCell>Name</Table.HeaderCell>\n                                <Table.HeaderCell>Vote Count</Table.HeaderCell>\n                            </Table.Row>\n                        </Table.Header>\n                        <Table.Body>\n                            {this.renderCandidates()}\n                        </Table.Body>\n                    </Table>\n                </Message>\n                <Divider />\n                <Segment raised>\n                    {this.renderForm()}\n                </Segment>\n                <Divider />\n                <Segment raised>Your Account is: <strong>{this.props.drizzleState.accounts[0]}</strong></Segment>\n            </Container>\n        );\n    }\n}\n\nexport default Election;\n","import React from 'react';\nimport { Loader } from 'semantic-ui-react';\n\nexport default () => {\n    return (\n        <Loader\n            active\n            inline=\"centered\"\n            size=\"massive\"\n        />\n    );\n}\n","import React, { Component } from 'react';\nimport { DrizzleContext } from 'drizzle-react';\nimport 'semantic-ui-css/semantic.min.css'\nimport 'toastr/build/toastr.min.css'\n\nimport Election from './components/Election';\nimport Spinner from './components/Spinner';\n\nclass App extends Component {\n\n  state = { loading: false };\n\n  showLoader() {\n    this.setState({ loading: true });\n  }\n\n  hideLoader() {\n    this.setState({ loading: false });\n  }\n\n  render() {\n    return (\n      <DrizzleContext.Consumer>\n        {drizzleContext => {\n          const { drizzle, drizzleState, initialized } = drizzleContext;\n      \n          if (!initialized || this.state.loading) {\n            return (\n              <div className=\"container text-center mt-5\">\n                <Spinner />\n              </div>\n            );\n          }\n    \n          return (\n            <div className=\"container text-center mt-5\">\n              <Election\n                drizzle={drizzle}\n                drizzleState={drizzleState}\n                showLoader={this.showLoader.bind(this)}\n                hideLoader={this.hideLoader.bind(this)}\n              />\n            </div>\n          );\n        }}\n      </DrizzleContext.Consumer>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Drizzle, generateStore } from \"drizzle\";\nimport { DrizzleContext } from 'drizzle-react';\n\nimport Election from './contracts/Election.json'\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst options = {\n    contracts: [\n        Election,\n    ]\n}\n\nconst drizzleStore = generateStore(options);\nconst drizzle = new Drizzle(options, drizzleStore);\n\nReactDOM.render(\n    <DrizzleContext.Provider drizzle={drizzle}>\n        <App />\n    </DrizzleContext.Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}